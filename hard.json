[
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 1)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 2)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 3)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 4)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 5)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 6)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 7)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 8)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 9)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 10)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 11)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 12)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 13)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 14)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 15)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 16)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 17)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 18)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 19)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 20)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 21)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 22)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 23)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 24)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 25)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 26)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 27)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 28)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 29)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 30)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 31)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 32)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 33)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 34)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 35)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 36)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 37)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 38)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 39)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 40)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 41)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 42)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 43)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 44)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 45)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 46)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 47)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 48)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 49)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 50)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 51)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 52)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 53)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 54)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 55)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 56)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 57)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 58)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 59)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 60)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 61)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 62)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 63)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 64)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 65)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 66)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 67)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 68)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 69)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 70)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 71)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 72)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 73)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 74)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 75)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 76)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 77)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 78)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 79)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 80)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 81)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 82)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 83)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 84)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 85)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 86)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 87)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 88)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 89)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 90)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 91)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 92)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 93)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 94)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 95)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 96)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 97)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 98)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 99)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    },
    {
        "question": "What will be the output of this code: def func(x=[]): x.append(1); return x (Call 100)",
        "options": [
            "[1]",
            "[1, 1]",
            "[]",
            "Raises a TypeError"
        ],
        "answer": "[1, 1]",
        "explanation": "Default mutable arguments persist across function calls. Each call to func() appends to the same list."
    }
]